#!/usr/bin/env texlua
-- this script works only with texlua, Lua interpreter based on LuaTeX
kpse.set_program_name "luatex"

config = {
  img_convert = {
    -- all supported commands should read data from stdin
    svg = "cairosvg -o ${dest} -",
    webp = "magick WEBP:- ${dest}", 
    gif = "magick GIF:-[0,0] ${dest}", -- [0,0] should select the first frame from animated GIF
  }
}

local lapp = require "lapp-mk4"
local htmllib = require "rmodepdf-htmllib"
local htmlprocess = require "rmodepdf-htmltemplates"
local domobject = require "luaxml-domobject"
local encodings = require "luaxml-encodings"
local mathjax = require "rmodepdf-mathjax"


local msg = [[
Usage: rmodepdf [options] url
-b,--baseurl                Base URL used when the HTML content is read from the standard input
-h,--help                   Print help message
-i,--imgdir   (default img) Download images and save them to the specified directory
-n,--noimages               Don't download images
-t,--template (default "")  LaTeX template
-p,--print                  Print the converted LaTeX source
-v,--version                Print version
<url>         (string)
]]
 -- <urladdress>  (string)      URL to be processed

local args = lapp(msg)

local function help(err)
  if err then print(err) end
  print(msg) 
  os.exit()
end

local function version()
  print("Rmodepdf version {{version}}")
  os.exit()
end


if args.help then help() end
if args.version then version() end

-- main content of the script
local content, err_msg
local baseurl
local url = args.url

if url and url ~= "" and url ~= "-" then
  -- read content from an url
  baseurl = url
  content, err_msg = htmllib.curl(baseurl)
  if not content then
    help(err_msg)
  end
else
  -- read content from stdin
  -- we must use baseurl with stdin
  if not args.baseurl or args.baseurl == "" then help("Missing baseurl") end
  content = io.read("*all")
end


local enc = encodings.find_html_encoding(content)
if enc then
  local mapping = encodings.load_mapping(enc)
  if mapping then
    content = encodings.recode(content, mapping)
  end
end

-- 
local imgdir = "img"
if args.imgdir and args.imgdir~="" then
  imgdir = args.imgdir
end

local template = [[
\documentclass{article}
\usepackage{graphicx,csquotes,cals,responsive,linebreaker,fontspec}
\usepackage[@{lang}]{babel}
\setmainfont{Literata}


\begin{document}
%s
\end{document}
]]

if args.template and args.template~="" then
  local f = io.open(args.template, "r")
  if f then
    template = f:read("*all")
    f:close()
  end
end

local tmpfile, metadata = htmllib.readability(content, baseurl)
local f = io.open(tmpfile, "r")
local content = f:read("*all")
f:close()
local dom = domobject.html_parse(content)
content = htmllib.download_images(dom, imgdir)
-- keep inline LaTeX code, for example MathJax content
local ignored = {"pre", "code"}
local allowed_commands = {"ref", "pageref", "cleveref", "nameref"}
mathjax.process_latex(dom, ignored, allowed_commands)
htmlprocess.add_action("html", template)

local processed = htmlprocess.process_dom(dom)
if args.print then
  print(processed)
end
os.remove(tmpfile)
