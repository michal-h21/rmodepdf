#!/usr/bin/env texlua
-- this script works only with texlua, Lua interpreter based on LuaTeX
kpse.set_program_name "luatex"

config = {
  img_convert = { -- configure convertors from image formats not supported by LuaTeX
    -- all supported commands should read data from stdin
    svg = "cairosvg -o ${dest} -",
    webp = "magick WEBP:- ${dest}", 
    gif = "magick GIF:-[0,0] ${dest}", -- [0,0] should select the first frame from animated GIF
  },

  html_latex = { -- support for LaTeX math in webpages that use MathJax or KaTeX
    ignored = {"pre", "code"}, -- html elements which shouldn't be processed for LaTeX commands
    allowed_commands = {"ref", "pageref", "cleveref", "nameref"}
  },
  aux_files = {-- extensions of auxilary files from LaTeX run
    "aux", "log", "toc"
  },
  max_runs = 3, -- maximum number of compilations
  page_formats = {
    ebook = {paperwidth="116mm", paperheight = "182mm", margin = "5mm"},
    a5paper = {"a5paper"},
    a4paper = {"a4paper"},
  },
  allowed_url_prefixes = {"http", "https", "ftp"},
  pages = {},  -- processed pages DOM and metadata
  document = {-- document settings
    preamble_extras = "", -- additional commands or packages for 
    languages = {} -- list of all used languages, for use with Babel or Polyglossia
  }
}

local lapp = require "lapp-mk4"
logging = require "make4ht-logging"
local htmllib = require "rmodepdf-htmllib"
-- htmlprocess needs to be global, to be available in config files
htmlprocess = require "rmodepdf-htmltemplates"
local domobject = require "luaxml-domobject"
local mathjax = require "rmodepdf-mathjax"
local compile = require "rmodepdf-compile"
local tmpfiles = require "rmodepdf-tmpfiles"
local textemplates = require "rmodepdf-textemplates"

local log = logging.new "rmodepdf"


local msg = [[
Usage: rmodepdf [options] url
-b,--baseurl     (default "")      Base URL used when the HTML content is read from the standard input
-c,--configfile  (default "")      Filename of Lua configuration file
-h,--help                          Print help message
-i,--imgdir      (default "")      Download images and save them to the specified directory
-l,--loglevel    (default status)  Set log level
                                   possible values: debug, info, status, warning, error, fatal
-n,--noimages                      Don't download images
-N,--nomathjax                     Don't process LaTeX commands in the HTML document
-t,--template    (default "")      LaTeX template
-o,--output      (default "")      Output file name
-p,--print                         Print the converted LaTeX source
-P,--pageformat  (default ebook)   Page format 
-R,--nordrview                     Don't use rdrview to get the clean contents from the web pages
-s,--pagestyle   (default empty)   \pagestyle for the document
-v,--version                       Print version
<url>            (string)
]]
 -- <urladdress>  (string)      URL to be processed

local args = lapp(msg)

-- make the command line arguments available in global config
config.args = args

-- set logging level
logging.set_level(args.loglevel)

local function help(err)
  if err then log:error(err) end
  print(msg) 
  os.exit()
end

local function version()
  print("Rmodepdf version {{version}}")
  os.exit()
end


if args.help then help() end
if args.version then version() end

-- main content of the script
local content, err_msg
local baseurl
local url = args.url

if url and url ~= "" and url ~= "-" then
  -- read content from an url
  baseurl = url
  content, err_msg = htmllib.curl(baseurl)
  if not content then
    help(err_msg)
  end
else
  -- read content from stdin
  -- we must use baseurl with stdin
  if not args.baseurl or args.baseurl == '""' then help("Missing baseurl") end
  content = io.read("*all")
end


-- 
local imgdir = ""
if args.imgdir and args.imgdir~='""' then
  imgdir = args.imgdir
end

config.document.pagestyle = args.pagestyle

config.template = [[
\documentclass{article}
\usepackage{graphicx,csquotes,cals,responsive,linebreaker,fontspec,microtype}
\usepackage[export]{adjustbox}
\usepackage[_{document.languages}%s/{,}]{babel}
\setmainfont{Literata}
\usepackage[@{document.geometry}]{geometry}
\pagestyle{@{document.pagestyle}}
@{document.preamble_extras}
\begin{document}
_{pages}
\selectlanguage{@{language}}
?{Title}{\noindent\textbf{Title: @{Title}}\par}{}
?{Byline}{\noindent Author: @{Byline}\par}{}
@{content}
/{\clearpage}
\end{document}
]]


if args.template and args.template~='""' then
  local f = io.open(args.template, "r")
  if f then
    config.template = f:read("*all")
    f:close()
  else
    log:error("Cannot read template: " .. args.template)
  end
end

-- some functions that can be redefined in the config file and used for modyfing of the HTML code or DOM

--- Modify string with the raw HTML before readability and DOM parsing
---@param content string raw HTML
---@param url? string
---@return string modified content
function preprocess_content(content, url)
  print(config.current_url)
  return content
end

--- Modify DOM object before fetchching of images or handling of MathJax
--- @param dom table DOM object
--- @param content string original HTML text
--- @param url? string
--- @return table DOM object
function preprocess_dom(dom,content, url)
  return dom
end


--- Modify DOM after all processing by Rmodepdf
---@param dom table 
---@param content string
---@param url? string
---@return any
function postprocess_dom(dom, content, url)
  return dom
end

--- Late post-processing of the config table
function postprocess()
end

--- Modify the configuration table
--- @param new_config table Table with 
--- @param current_table? table
function add_to_config(new_config, current_table)
  local current_table = current_table or config
  for k, v in pairs(new_config) do
    if type(current_table[k]) == "table" and type(v) == "table" then
      add_to_config(v, current_table[k])
    else
      current_table[k] = v
    end
  end
end



-- handle the config file
if args.configfile and args.configfile~='""'  then
  if htmllib.file_exists(args.configfile) then
    log:debug("Loading configfile: " .. args.configfile)
    local script, msg = loadfile(args.configfile)
    if not script then
      log:error("Config file parsing error: " .. msg)
      os.exit(1)
    else
      script()
    end
  else
    log:error("Cannot find configfile: " .. args.configfile)
  end
end

-- 
if not config.document.geometry then
  config.document.geometry = htmllib.get_geometry(args.pageformat)
end

--- we must add  this configuration separatelly, because we already use other 
config.mime_to_ext = {
    ["image/png"] = {ext = "png"},
    ["image/jpeg"] = {ext = "jpg"},
    ["image/svg+xml"] = {ext = "pdf", convert = config.img_convert.svg},
    ["image/gif"] = {ext = "png", convert = config.img_convert.gif},
    ["image/webp"] = {ext = "png", convert = config.img_convert.webp},
}

--- get DOM and metadata for HTML file
--- @param content string HTML content
--- @param baseurl string URL of the document
--- @return table DOM_object 
--- @return string output file name based on the page title
--- @return table metadata 
local function prepare_file(content, baseurl)
  local content = content
  -- recode document from 8-bit encoding to UTF-8 if necessary
  content = htmllib.to_utf8(content)
  config.current_url = baseurl
  -- call hook to clean HTML before passing to readability
  content = preprocess_content(content, baseurl)
  local metadata
  if not args.nordrview then
    content, metadata = htmllib.readability(content, baseurl)
  end
  local dom = domobject.html_parse(content)
  if not metadata then
    -- metadata should be populated by rdrview, but if it fails, we will try to get it from DOM
    metadata = htmllib.get_metadata(dom, baseurl)
  end
  local output = htmllib.clean_title(metadata.Title)
  dom = preprocess_dom(dom, content, baseurl)
  if not args.noimages then
    dom = htmllib.download_images(dom, imgdir)
  else
    -- remove images with the --noimages command line option
    for _, el in ipairs(dom:query_selector("img")) do el:remove_node() end
  end
  if not args.nomathjax then
    -- process text nodes for LaTeX commands. This should support pages that use MathJax to render math
    -- keep inline LaTeX code, for example MathJax content
    local ignored = config.html_latex.ignored
    local allowed_commands = config.html_latex.allowed_commands
    mathjax.process_latex(dom, ignored, allowed_commands)
  end
  dom = postprocess_dom(dom, content, baseurl)
  return dom, output, metadata
end


----------------------------------------
--- prepare documents                ---
----------------------------------------

-- process the first document
local dom, output, metadata = prepare_file(content, baseurl)
-- keep track of used languages
table.insert(config.document.languages, metadata.language)

local processed = htmlprocess.process_dom(dom)
metadata.content = processed
table.insert(config.pages, metadata)

-- if we get multiple urls, we will process them all
if #args > 0 then
  -- we must use different template than for the first file, because the default template produces full
  -- LaTeX document, including \end{document}
  for _, url in ipairs(args) do
    local content, err_msg = htmllib.curl(url)
    if not content then
      log:error("Cannot load url: "  .. url)
      log:error(err_msg)
    else
      local dom, output, metadata = prepare_file(content, url)
      metadata.content = htmlprocess.process_dom(dom) -- new_processed[#new_processed]
      table.insert(config.pages, metadata)
      table.insert(config.document.languages, metadata.language)
    end
  end
end

-------------------------------
--- handle output file name ---
-------------------------------

-- if we don't have explicit output filename from the command line or if it is invalid, use the filename based on datetime
if not output or output == ""  or output == "_" then
  output = "rmodepdf-" .. os.date("%Y%m%d-%H-%M")
end

if args.output and args.output~='""' then
  -- if the output file name is specified at the command line, remove the .pdf extension, 
  -- as it is used as the --jobname option lualatex
  output = args.output:gsub(".pdf$", "")
end

-- remove duplicate languages for use with Babel
local used_languages = {}
for i, lang in ipairs(config.document.languages) do
  if used_languages[lang] then table.remove(config.document.languages, i) end
  used_languages[lang] = true
end

-----------------------
--- expand template ---
-----------------------
---

-- late post processing, you can modify configuration here
post_process()

processed = textemplates.expand(config.template, "", config)
print(processed)

----------------------
--- output         ---
----------------------

if args.print then
  print(processed)
else
  compile.compile(processed, output)
  log:status("File saved as: " .. output .. ".pdf")
end

tmpfiles.clean()
